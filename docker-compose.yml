# docker-compose.yml

# Reusable snippets (anchors)
x-healthcheck-mssql: &healthcheck_mssql
  healthcheck:
    test: ["CMD", "/opt/mssql-tools18/bin/sqlcmd", "-S", "localhost,1433", "-U", "sa", "-P", "${DB_PASSWORD}", "-C", "-Q", "SELECT 1"]
    interval: 10s
    timeout: 5s
    retries: 20

x-healthcheck-tcp-8080: &healthcheck_tcp_8080
  healthcheck:
    test: ["CMD-SHELL", "bash -c 'exec 3<>/dev/tcp/127.0.0.1/8080' || exit 1"]
    interval: 10s
    timeout: 3s
    retries: 30
    start_period: 20s

x-healthcheck-tcp-8081: &healthcheck_tcp_8081
  healthcheck:
    test: ["CMD-SHELL", "bash -c 'exec 3<>/dev/tcp/127.0.0.1/8081' || exit 1"]
    interval: 10s
    timeout: 3s
    retries: 30
    start_period: 20s

x-healthcheck-tcp-8090: &healthcheck_tcp_8090
  healthcheck:
    test: ["CMD-SHELL", "bash -c 'exec 3<>/dev/tcp/127.0.0.1/8090' || exit 1"]
    interval: 10s
    timeout: 3s
    retries: 30
    start_period: 20s
    
  # ---------- Reusable healthcheck for RabbitMQ ----------
  x-healthcheck-rabbit: &healthcheck_rabbit
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmq-diagnostics -q ping" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
      
  # ---------- Reusable healthcheck for PublisherService ----------
x-healthcheck-tcp-8082: &healthcheck_tcp_8082
  healthcheck:
    test: ["CMD-SHELL", "bash -c 'exec 3<>/dev/tcp/127.0.0.1/8082' || exit 1"]
    interval: 10s
    timeout: 3s
    retries: 30
    start_period: 20s


x-restart: &restart
  restart: unless-stopped

services:
  # ---------- Article databases (only Global active) ----------
  articles-global-db:
    image: "${DB_IMAGE}"
    platform: "${DB_PLATFORM}"
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "${DB_PASSWORD}"
      MSSQL_MEMORY_LIMIT_MB: "1024"
    volumes:
      - mssql-global:/var/opt/mssql
    ports:
      - "14338:1433"   # Global
    <<: [*healthcheck_mssql, *restart]

  # ---------- Comment Database ----------
  comments-db:
    image: "${DB_IMAGE}"
    platform: "${DB_PLATFORM}"
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "${DB_PASSWORD}"
      MSSQL_MEMORY_LIMIT_MB: "1024"
    volumes:
      - mssql-comments:/var/opt/mssql
    ports:
      - "14339:1433"   # Comment
    <<: [*healthcheck_mssql, *restart]

  # ---------- Profanity Database ----------
  profanity-db:
    image: "${DB_IMAGE}"
    platform: "${DB_PLATFORM}"
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "${DB_PASSWORD}"
      MSSQL_MEMORY_LIMIT_MB: "768"
    volumes:
      - mssql-profanity:/var/opt/mssql
    ports:
      - "14340:1433"   # Profanity
    <<: [*healthcheck_mssql, *restart]

  # ---------- Draft Database ----------
  draft-db:
    image: "${DB_IMAGE}"
    platform: "${DB_PLATFORM}"
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "${DB_PASSWORD}"
      MSSQL_MEMORY_LIMIT_MB: "1024"
    volumes:
      - mssql-draft:/var/opt/mssql
    ports:
      - "14341:1433"   # Draft
    <<: [*healthcheck_mssql, *restart]

  # ---------- ArticleService ----------
  article-service:
    build:
      context: ./Services/ArticleService
      dockerfile: Dockerfile
    deploy:
      replicas: 3                 # note: ignored by Compose; use --scale if needed
    environment:
      ASPNETCORE_URLS: "http://0.0.0.0:8080"
      ConnectionStrings__Global:  "Server=articles-global-db,1433;Database=ArticlesDb_Global;User ID=${DB_USER};Password=${DB_PASSWORD};Encrypt=True;TrustServerCertificate=True;"
      ConnectionStrings__Default: "Server=articles-global-db,1433;Database=ArticlesDb_Global;User ID=${DB_USER};Password=${DB_PASSWORD};Encrypt=True;TrustServerCertificate=True;"
      Seq__Url: "http://seq:5341"
    depends_on:
      articles-global-db:
        condition: service_healthy
    <<: [*healthcheck_tcp_8080, *restart]
    # (No ports here â€“ exposed via lb:8080)

  # ---------- CommentService ----------
  comment-service:
    build:
      context: ./Services/CommentService
      dockerfile: Dockerfile
    environment:
      ASPNETCORE_URLS: "http://0.0.0.0:8081"
      ConnectionStrings__Default: "Server=comments-db,1433;Database=CommentsDb;User ID=${DB_USER};Password=${DB_PASSWORD};Encrypt=True;TrustServerCertificate=True;"
      PROFANITY_BASEURL: "http://profanity-service:8080/"
      Seq__Url: "http://seq:5341"
    depends_on:
      comments-db:
        condition: service_healthy
      profanity-service:
        condition: service_healthy
    ports:
      - "8081:8081"
    <<: [*healthcheck_tcp_8081, *restart]

  # ---------- ProfanityService ----------
  profanity-service:
    build:
      context: ./Services/ProfanityService
      dockerfile: Dockerfile
    environment:
      ASPNETCORE_URLS: "http://0.0.0.0:8080"
      PROFANITY_DB: "Server=profanity-db,1433;Database=ProfanityDb;User ID=${DB_USER};Password=${DB_PASSWORD};Encrypt=True;TrustServerCertificate=True;"
      Seq__Url: "http://seq:5341"
    depends_on:
      profanity-db:
        condition: service_healthy
    ports:
      - "8089:8080"
    <<: [*healthcheck_tcp_8080, *restart]

  # ---------- DraftService ----------
  draft-service:
    build:
      context: ./Services/DraftService
      dockerfile: Dockerfile
    environment:
      ASPNETCORE_URLS: "http://0.0.0.0:8090"
      ConnectionStrings__Default: "Server=draft-db,1433;Database=DraftDb;User ID=${DB_USER};Password=${DB_PASSWORD};Encrypt=True;TrustServerCertificate=True;"
      Seq__Url: "http://seq:5341"
    depends_on:
      draft-db:
        condition: service_healthy
    ports:
      - "8090:8090"
    <<: [*healthcheck_tcp_8090, *restart]
    
  # ---------- RabbitMQ ----------
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"     # AMQP
      - "15672:15672"   # Mgmt UI
    <<: [ *healthcheck_rabbit, *restart ]

  # ---------- PublisherService ----------
  publisher-service:
    build:
      context: ./Services/PublisherService
      dockerfile: Dockerfile
    environment:
      ASPNETCORE_URLS: "http://0.0.0.0:8082"
      # Profanity base URL points at your existing profanity-service (exposed on 8080 inside network)
      PROFANITY_BASEURL: "http://profanity-service:8080/"
      # Rabbit options
      Rabbit__Uri: "amqp://guest:guest@rabbitmq:5672/"
      Rabbit__Exchange: "articles"
      Rabbit__RoutingKey: "article.publish.request"
      Seq__Url: "http://seq:5341"              # keep consistent if you log later
    depends_on:
      rabbitmq:
        condition: service_healthy
      profanity-service:
        condition: service_healthy
    ports:
      - "8082:8082"
    <<: [ *healthcheck_tcp_8082, *restart ]

  # ---------- NGINX load balancer ----------
  lb:
    image: nginx:alpine
    ports:
      - "8080:8080"
    volumes:
      - ./Infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      article-service:
        condition: service_started
      comment-service:
        condition: service_started
    <<: [*restart]

  # ---------- Central Logging ----------
  seq:
    image: datalust/seq:2024
    environment:
      ACCEPT_EULA: "Y"
    ports:
      - "8085:80"     # Seq UI
      - "5341:5341"   # ingestion
    volumes:
      - seq-data:/data

volumes:
  mssql-global:
  mssql-comments:
  mssql-profanity:
  mssql-draft:
  seq-data:
