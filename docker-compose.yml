# docker-compose.yml

# Reusable snippets (anchors)
x-healthcheck-mssql: &healthcheck_mssql
  healthcheck:
    test: ["CMD", "/opt/mssql-tools18/bin/sqlcmd", "-S", "localhost,1433", "-U", "sa", "-P", "${DB_PASSWORD}", "-C", "-Q", "SELECT 1"]
    interval: 10s
    timeout: 5s
    retries: 20

x-healthcheck-tcp-8080: &healthcheck_tcp_8080
  healthcheck:
    test: ["CMD-SHELL", "bash -c 'exec 3<>/dev/tcp/127.0.0.1/8080' || exit 1"]
    interval: 10s
    timeout: 3s
    retries: 30
    start_period: 20s

x-healthcheck-tcp-8081: &healthcheck_tcp_8081
  healthcheck:
    test: ["CMD-SHELL", "bash -c 'exec 3<>/dev/tcp/127.0.0.1/8081' || exit 1"]
    interval: 10s
    timeout: 3s
    retries: 30
    start_period: 20s

x-healthcheck-tcp-8090: &healthcheck_tcp_8090
  healthcheck:
    test: ["CMD-SHELL", "bash -c 'exec 3<>/dev/tcp/127.0.0.1/8090' || exit 1"]
    interval: 10s
    timeout: 3s
    retries: 30
    start_period: 20s

x-restart: &restart
  restart: unless-stopped

services:
  # ---------- Article DB (Global) ----------
  articles-global-db:
    image: "${DB_IMAGE}"
    platform: "${DB_PLATFORM}"
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "${DB_PASSWORD}"
      MSSQL_MEMORY_LIMIT_MB: "1024"
    volumes:
      - mssql-global:/var/opt/mssql
    ports:
      - "14338:1433"
    <<: [*healthcheck_mssql, *restart]

  # ---------- Comment DB ----------
  comments-db:
    image: "${DB_IMAGE}"
    platform: "${DB_PLATFORM}"
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "${DB_PASSWORD}"
      MSSQL_MEMORY_LIMIT_MB: "1024"
    volumes:
      - mssql-comments:/var/opt/mssql
    ports:
      - "14339:1433"
    <<: [*healthcheck_mssql, *restart]

  # ---------- Profanity DB ----------
  profanity-db:
    image: "${DB_IMAGE}"
    platform: "${DB_PLATFORM}"
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "${DB_PASSWORD}"
      MSSQL_MEMORY_LIMIT_MB: "768"
    volumes:
      - mssql-profanity:/var/opt/mssql
    ports:
      - "14340:1433"
    <<: [*healthcheck_mssql, *restart]

  # ---------- Draft DB ----------
  draft-db:
    image: "${DB_IMAGE}"
    platform: "${DB_PLATFORM}"
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "${DB_PASSWORD}"
      MSSQL_MEMORY_LIMIT_MB: "1024"
    volumes:
      - mssql-draft:/var/opt/mssql
    ports:
      - "14341:1433"
    <<: [*healthcheck_mssql, *restart]

  # ---------- ArticleService ----------
  article-service:
    build:
      context: ./Services/ArticleService
      dockerfile: Dockerfile
    environment:
      ASPNETCORE_URLS: "http://0.0.0.0:8080"
      ConnectionStrings__Global: "Server=articles-global-db,1433;Database=ArticlesDb_Global;User ID=${DB_USER};Password=${DB_PASSWORD};Encrypt=True;TrustServerCertificate=True;"
      ConnectionStrings__Default: "Server=articles-global-db,1433;Database=ArticlesDb_Global;User ID=${DB_USER};Password=${DB_PASSWORD};Encrypt=True;TrustServerCertificate=True;"
    depends_on:
      articles-global-db:
        condition: service_healthy
    <<: [*healthcheck_tcp_8080, *restart]

  # ---------- CommentService ----------
  comment-service:
    build:
      context: ./Services/CommentService
      dockerfile: Dockerfile
    environment:
      ASPNETCORE_URLS: "http://0.0.0.0:8081"
      ConnectionStrings__Default: "Server=comments-db,1433;Database=CommentsDb;User ID=${DB_USER};Password=${DB_PASSWORD};Encrypt=True;TrustServerCertificate=True;"
      PROFANITY_BASEURL: "http://profanity-service:8080/"
    depends_on:
      comments-db:
        condition: service_healthy
      profanity-service:
        condition: service_healthy
    ports:
      - "8081:8081"
    <<: [*healthcheck_tcp_8081, *restart]

  # ---------- ProfanityService ----------
  profanity-service:
    build:
      context: ./Services/ProfanityService
      dockerfile: Dockerfile
    environment:
      ASPNETCORE_URLS: "http://0.0.0.0:8080"
      PROFANITY_DB: "Server=profanity-db,1433;Database=ProfanityDb;User ID=${DB_USER};Password=${DB_PASSWORD};Encrypt=True;TrustServerCertificate=True;"
    depends_on:
      profanity-db:
        condition: service_healthy
    ports:
      - "8089:8080"
    <<: [*healthcheck_tcp_8080, *restart]

  # ---------- DraftService ----------
  draft-service:
    build:
      context: ./Services/DraftService
      dockerfile: Dockerfile
    environment:
      ASPNETCORE_URLS: "http://0.0.0.0:8090"
      ConnectionStrings__Default: "Server=draft-db,1433;Database=DraftDb;User ID=${DB_USER};Password=${DB_PASSWORD};Encrypt=True;TrustServerCertificate=True;"
    depends_on:
      draft-db:
        condition: service_healthy
    ports:
      - "8090:8090"
    <<: [*healthcheck_tcp_8090, *restart]

  # ---------- NGINX load balancer ----------
  lb:
    image: nginx:alpine
    ports:
      - "8080:8080"
    volumes:
      - ./Infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      article-service:
        condition: service_started
      comment-service:
        condition: service_started
    <<: [*restart]

volumes:
  mssql-global:
  mssql-comments:
  mssql-profanity:
  mssql-draft: