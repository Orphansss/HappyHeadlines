# docker-compose.yml

# Reusable snippets (anchors)
x-healthcheck-mssql: &healthcheck_mssql
  healthcheck:
    test: ["CMD", "/opt/mssql-tools18/bin/sqlcmd", "-S", "localhost,1433", "-U", "sa", "-P", "${DB_PASSWORD}", "-C", "-Q", "SELECT 1"]
    interval: 10s
    timeout: 5s
    retries: 20

x-healthcheck-tcp-8080: &healthcheck_tcp_8080
  healthcheck:
    test: ["CMD-SHELL", "bash -c 'exec 3<>/dev/tcp/127.0.0.1/8080' || exit 1"]
    interval: 10s
    timeout: 3s
    retries: 30
    start_period: 20s

x-healthcheck-tcp-8081: &healthcheck_tcp_8081
  healthcheck:
    test: ["CMD-SHELL", "bash -c 'exec 3<>/dev/tcp/127.0.0.1/8081' || exit 1"]
    interval: 10s
    timeout: 3s
    retries: 30
    start_period: 20s

x-healthcheck-tcp-8090: &healthcheck_tcp_8090
  healthcheck:
    test: ["CMD-SHELL", "bash -c 'exec 3<>/dev/tcp/127.0.0.1/8090' || exit 1"]
    interval: 10s
    timeout: 3s
    retries: 30
    start_period: 20s

x-healthcheck-tcp-8083: &healthcheck_tcp_8083
  healthcheck:
    test: ["CMD-SHELL", "bash -c 'exec 3<>/dev/tcp/127.0.0.1/8083' || exit 1"]
    interval: 10s
    timeout: 3s
    retries: 30
    start_period: 20s

x-healthcheck-redis: &healthcheck_redis
  healthcheck:
    test: [ "CMD", "redis-cli", "ping" ]
    interval: 10s
    timeout: 5s
    retries: 10
    start_period: 5s
    
  # ---------- Reusable healthcheck for RabbitMQ ----------
x-healthcheck-rabbit: &healthcheck_rabbit
  healthcheck:
    test: [ "CMD-SHELL", "rabbitmq-diagnostics -q ping" ]
    interval: 10s
    timeout: 5s
    retries: 10
    start_period: 10s
      
  # ---------- Reusable healthcheck for PublisherService ----------
x-healthcheck-tcp-8082: &healthcheck_tcp_8082
  healthcheck:
    test: ["CMD-SHELL", "bash -c 'exec 3<>/dev/tcp/127.0.0.1/8082' || exit 1"]
    interval: 10s
    timeout: 3s
    retries: 30
    start_period: 20s


x-restart: &restart
  restart: unless-stopped

services:
  # ---------- Article databases (only Global active) ----------
  articles-global-db:
    image: "${DB_IMAGE}"
    platform: "${DB_PLATFORM}"
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "${DB_PASSWORD}"
      MSSQL_MEMORY_LIMIT_MB: "1024"
    volumes:
      - mssql-global:/var/opt/mssql
    ports:
      - "14338:1433"
    <<: [*healthcheck_mssql, *restart]

      # ---------- Article databases ----------
  # articles-europe-db:
  #   image: "${DB_IMAGE}"
  #   platform: "${DB_PLATFORM}"
  #   environment:
  #     ACCEPT_EULA: "Y"
  #     SA_PASSWORD: "${DB_PASSWORD}"
  #     MSSQL_PID: "Developer"
  #     MSSQL_MEMORY_LIMIT_MB: "1024"
  #   volumes:
  #     - mssql-europe:/var/opt/mssql
  #   ports:
  #     - "14331:1433"   # Europe
  #   <<: [*healthcheck_mssql, *restart]

  # articles-asia-db:
  #   image: "${DB_IMAGE}"
  #   platform: "${DB_PLATFORM}"
  #   environment:
  #     ACCEPT_EULA: "Y"
  #     SA_PASSWORD: "${DB_PASSWORD}"
  #     MSSQL_PID: "Developer"
  #     MSSQL_MEMORY_LIMIT_MB: "1024"
  #   volumes:
  #     - mssql-asia:/var/opt/mssql
  #   ports:
  #     - "14332:1433"   # Asia
  #   <<: [*healthcheck_mssql, *restart]

  # articles-africa-db:
  #   image: "${DB_IMAGE}"
  #   platform: "${DB_PLATFORM}"
  #   environment:
  #     ACCEPT_EULA: "Y"
  #     SA_PASSWORD: "${DB_PASSWORD}"
  #     MSSQL_PID: "Developer"
  #     MSSQL_MEMORY_LIMIT_MB: "1024"
  #   volumes:
  #     - mssql-africa:/var/opt/mssql
  #   ports:
  #     - "14333:1433"   # Africa
  #   <<: [*healthcheck_mssql, *restart]

  # articles-northamerica-db:
  #   image: "${DB_IMAGE}"
  #   platform: "${DB_PLATFORM}"
  #   environment:
  #     ACCEPT_EULA: "Y"
  #     SA_PASSWORD: "${DB_PASSWORD}"
  #     MSSQL_PID: "Developer"
  #     MSSQL_MEMORY_LIMIT_MB: "1024"
  #   volumes:
  #     - mssql-northamerica:/var/opt/mssql
  #   ports:
  #     - "14334:1433"   # North America
  #   <<: [*healthcheck_mssql, *restart]

  # articles-southamerica-db:
  #   image: "${DB_IMAGE}"
  #   platform: "${DB_PLATFORM}"
  #   environment:
  #     ACCEPT_EULA: "Y"
  #     SA_PASSWORD: "${DB_PASSWORD}"
  #     MSSQL_PID: "Developer"
  #     MSSQL_MEMORY_LIMIT_MB: "1024"
  #   volumes:
  #     - mssql-southamerica:/var/opt/mssql
  #   ports:
  #     - "14335:1433"   # South America
  #   <<: [*healthcheck_mssql, *restart]

  # articles-oceania-db:
  #   image: "${DB_IMAGE}"
  #   platform: "${DB_PLATFORM}"
  #   environment:
  #     ACCEPT_EULA: "Y"
  #     SA_PASSWORD: "${DB_PASSWORD}"
  #     MSSQL_PID: "Developer"
  #     MSSQL_MEMORY_LIMIT_MB: "1024"
  #   volumes:
  #     - mssql-oceania:/var/opt/mssql
  #   ports:
  #     - "14336:1433"   # Oceania
  #   <<: [*healthcheck_mssql, *restart]

  # articles-antarctica-db:
  #   image: "${DB_IMAGE}"
  #   platform: "${DB_PLATFORM}"
  #   environment:
  #     ACCEPT_EULA: "Y"
  #     SA_PASSWORD: "${DB_PASSWORD}"
  #     MSSQL_PID: "Developer"
  #     MSSQL_MEMORY_LIMIT_MB: "1024"
  #   volumes:
  #     - mssql-antarctica:/var/opt/mssql
  #   ports:
  #     - "14337:1433"   # Antarctica
  #   <<: [*healthcheck_mssql, *restart]

  # ---------- Comment Database ----------
  comments-db:
    image: "${DB_IMAGE}"
    platform: "${DB_PLATFORM}"
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "${DB_PASSWORD}"
      MSSQL_MEMORY_LIMIT_MB: "1024"
    volumes:
      - mssql-comments:/var/opt/mssql
    ports:
      - "14339:1433"
    <<: [*healthcheck_mssql, *restart]

  # ---------- Profanity Database ----------
  profanity-db:
    image: "${DB_IMAGE}"
    platform: "${DB_PLATFORM}"
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "${DB_PASSWORD}"
      MSSQL_MEMORY_LIMIT_MB: "768"
    volumes:
      - mssql-profanity:/var/opt/mssql
    ports:
      - "14340:1433"
    <<: [*healthcheck_mssql, *restart]

  # ---------- Draft Database ----------
  draft-db:
    image: "${DB_IMAGE}"
    platform: "${DB_PLATFORM}"
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "${DB_PASSWORD}"
      MSSQL_MEMORY_LIMIT_MB: "1024"
    volumes:
      - mssql-draft:/var/opt/mssql
    ports:
      - "14341:1433"
    <<: [*healthcheck_mssql, *restart]

  redis:
    image: redis:7
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20
    <<: [ *healthcheck_redis, *restart ]

  # ---------- ArticleService ----------
  article-service:
    build:
      context: .
      dockerfile: Services/ArticleService/Dockerfile
    deploy:
      replicas: 3   # note: ignored by compose; use --scale if needed
    environment:
      ASPNETCORE_URLS: "http://0.0.0.0:8080"
      # ConnectionStrings__Africa:       "Server=articles-africa-db,1433;Database=ArticlesDb_Africa;User ID=${DB_USER};Password=${DB_PASSWORD};Encrypt=True;TrustServerCertificate=True;"
      # ConnectionStrings__Asia:         "Server=articles-asia-db,1433;Database=ArticlesDb_Asia;User ID=${DB_USER};Password=${DB_PASSWORD};Encrypt=True;TrustServerCertificate=True;"
      # ConnectionStrings__Europe:       "Server=articles-europe-db,1433;Database=ArticlesDb_Europe;User ID=${DB_USER};Password=${DB_PASSWORD};Encrypt=True;TrustServerCertificate=True;"
      # ConnectionStrings__NorthAmerica: "Server=articles-northamerica-db,1433;Database=ArticlesDb_NorthAmerica;User ID=${DB_USER};Password=${DB_PASSWORD};Encrypt=True;TrustServerCertificate=True;"
      # ConnectionStrings__SouthAmerica: "Server=articles-southamerica-db,1433;Database=ArticlesDb_SouthAmerica;User ID=${DB_USER};Password=${DB_PASSWORD};Encrypt=True;TrustServerCertificate=True;"
      # ConnectionStrings__Oceania:      "Server=articles-oceania-db,1433;Database=ArticlesDb_Oceania;User ID=${DB_USER};Password=${DB_PASSWORD};Encrypt=True;TrustServerCertificate=True;"
      # ConnectionStrings__Antarctica:   "Server=articles-antarctica-db,1433;Database=ArticlesDb_Antarctica;User ID=${DB_USER};Password=${DB_PASSWORD};Encrypt=True;TrustServerCertificate=True;"
      ConnectionStrings__Global:       "Server=articles-global-db,1433;Database=ArticlesDb_Global;User ID=${DB_USER};Password=${DB_PASSWORD};Encrypt=True;TrustServerCertificate=True;"
      ConnectionStrings__Default:      "Server=articles-global-db,1433;Database=ArticlesDb_Global;User ID=${DB_USER};Password=${DB_PASSWORD};Encrypt=True;TrustServerCertificate=True;"
      Seq__Url: "http://seq:5341"
      Otel__Endpoint: "http://jaeger:4317"

      Redis__ConnectionString: "redis:6379,abortConnect=false"
      Redis__InstanceName: "happy:articles:"
      Cache__WarmupIntervalMinutes: "15"
      Cache__WarmupWindowDays: "14"
    depends_on:
      # articles-africa-db:
      #   condition: service_healthy
      # articles-asia-db:
      #   condition: service_healthy
      # articles-europe-db:
      #   condition: service_healthy
      # articles-northamerica-db:
      #   condition: service_healthy
      # articles-southamerica-db:
      #   condition: service_healthy
      # articles-oceania-db:
      #   condition: service_healthy
      # articles-antarctica-db:
      #   condition: service_healthy
      articles-global-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    <<: [*healthcheck_tcp_8080, *restart]
    # (No ports here â€“ exposed via lb:8080)

  # ---------- CommentService ----------
  comment-service:
    build:
      context: .
      dockerfile: Services/CommentService/Dockerfile
    environment:
      ASPNETCORE_URLS: "http://0.0.0.0:8081"
      ConnectionStrings__Default: "Server=comments-db,1433;Database=CommentsDb;User ID=${DB_USER};Password=${DB_PASSWORD};Encrypt=True;TrustServerCertificate=True;"
      PROFANITY_BASEURL: "http://profanity-service:8080/"
      Seq__Url: "http://seq:5341"
      Otel__Endpoint: "http://jaeger:4317"
    depends_on:
      comments-db:
        condition: service_healthy
      profanity-service:
        condition: service_healthy
    ports:
      - "8081:8081"
    <<: [*healthcheck_tcp_8081, *restart]

  # ---------- ProfanityService ----------
  profanity-service:
    build:
      context: .
      dockerfile: Services/ProfanityService/Dockerfile
    environment:
      ASPNETCORE_URLS: "http://0.0.0.0:8080"
      PROFANITY_DB: "Server=profanity-db,1433;Database=ProfanityDb;User ID=${DB_USER};Password=${DB_PASSWORD};Encrypt=True;TrustServerCertificate=True;"
      Seq__Url: "http://seq:5341"
      Otel__Endpoint: "http://jaeger:4317"
    depends_on:
      profanity-db:
        condition: service_healthy
    ports:
      - "8089:8080"
    <<: [*healthcheck_tcp_8080, *restart]

  # ---------- DraftService ----------
  draft-service:
    build:
      context: .
      dockerfile: Services/DraftService/Dockerfile
    environment:
      ASPNETCORE_URLS: "http://0.0.0.0:8090"
      ConnectionStrings__Default: "Server=draft-db,1433;Database=DraftDb;User ID=${DB_USER};Password=${DB_PASSWORD};Encrypt=True;TrustServerCertificate=True;"
      Seq__Url: "http://seq:5341"
      Otel__Endpoint: "http://jaeger:4317"
    depends_on:
      draft-db:
        condition: service_healthy
    ports:
      - "8090:8090"
    <<: [*healthcheck_tcp_8090, *restart]
    
  # ---------- RabbitMQ ----------
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"     # AMQP
      - "15672:15672"   # Mgmt UI
    <<: [ *healthcheck_rabbit, *restart ]

  # ---------- PublisherService ----------
  publisher-service:
    build:
      context: .
      dockerfile: Services/PublisherService/Dockerfile
    environment:
      ASPNETCORE_URLS: "http://0.0.0.0:8082"
      PROFANITY_BASEURL: "http://profanity-service:8080/"
      # Rabbit options
      Rabbit__Uri: "amqp://guest:guest@rabbitmq:5672/"
      Rabbit__Exchange: "articles"
      Rabbit__RoutingKey: "article.publish.request"
      Seq__Url: "http://seq:5341"              
    depends_on:
      rabbitmq:
        condition: service_healthy
      profanity-service:
        condition: service_healthy
    ports:
      - "8082:8082"
    <<: [ *healthcheck_tcp_8082, *restart ]

  # ---------- NewsletterService ----------
  newsletter-service:
    build:
      context: .
      dockerfile: Services/NewsletterService/Dockerfile
    environment:
      ASPNETCORE_URLS: "http://0.0.0.0:8083"
      ArticleService__BaseUrl: "http://article-service:8080"
      Seq__Url: "http://seq:5341"
      Otel__Endpoint: "http://jaeger:4317"
    ports:
      - "8083:8083"
    depends_on:
      article-service:
        condition: service_started
    <<: [*healthcheck_tcp_8083, *restart]

  # ---------- NGINX load balancer ----------
  lb:
    image: nginx:alpine
    ports:
      - "8080:8080"
    volumes:
      - ./Infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      article-service:
        condition: service_started
      comment-service:
        condition: service_started
    <<: [*restart]

  # ---------- Central Logging ----------
  seq:
    image: datalust/seq:2024
    environment:
      ACCEPT_EULA: "Y"
    ports:
      - "8085:80"     # Seq UI
      - "5341:5341"   # ingestion
    volumes:
      - seq-data:/data
    <<: [*restart]

  # ---------- Jaeger (tracing) ----------
  jaeger:
    image: jaegertracing/all-in-one:1.54
    ports:
      - "16686:16686"  # Jaeger UI
      - "4317:4317"    # OTLP gRPC
    <<: [*restart]

  # ---------- Prometheus (metrics collection) ----------
  prometheus:
    image: prom/prometheus:v2.54.1
    command: ["--config.file=/etc/prometheus/prometheus.yml"]
    volumes:
      - ./Infrastructure/Monitoring/prometheus:/etc/prometheus:ro
    ports:
      - "9090:9090"
    depends_on:
      - article-service
      # - comment-service    # uncomment when ready
    <<: [*restart]  

  # ---------- Grafana (metrics dashboard) ----------
  grafana:
    image: grafana/grafana:10.4.2
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    <<: [*restart]   

volumes:
  # mssql-europe:
  # mssql-asia:
  # mssql-africa:
  # mssql-northamerica:
  # mssql-southamerica:
  # mssql-oceania:
  # mssql-antarctica:
  mssql-global:
  mssql-comments:
  mssql-profanity:
  mssql-draft:
  seq-data:
